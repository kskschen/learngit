start menu with git

Administrator@PC-20180411SCIX MINGW64 ~
$ cd learngit                         ##open the work dictory

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ pwd
/c/Users/Administrator/learngit

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git add readme.txt                  ##open a file 

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git status                          ##look the status,
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   readme.txt


Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git diff                            ##find the difference

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git log                             ## search for histoury
commit 5f43bc02b3685d740e98cbedf4ac5e8a4b3a57c5 (HEAD -> master)
Author: kskschen <752211644@qq.com>
Date:   Fri Jun 22 11:20:10 2018 +0800

    add distributed

commit 024dabcbbc79277ea5003415474acecf21e37b1c
Author: kskschen <752211644@qq.com>
Date:   Fri Jun 22 11:02:42 2018 +0800

    wrote a  readme file

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git add readme.txt                      ##open the specific file

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git commit -m "append GPL"              ## step2 :commit the changes
[master 48763a1] append GPL
 1 file changed, 1 insertion(+), 1 deletion(-)

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git log                                     ##look at the commit history   查看提交记录
commit 48763a1603e3c774045333e4a19d613e8c03f62c (HEAD -> master)
Author: kskschen <752211644@qq.com>
Date:   Fri Jun 22 11:31:43 2018 +0800

    append GPL

commit 5f43bc02b3685d740e98cbedf4ac5e8a4b3a57c5
Author: kskschen <752211644@qq.com>
Date:   Fri Jun 22 11:20:10 2018 +0800

    add distributed

commit 024dabcbbc79277ea5003415474acecf21e37b1c
Author: kskschen <752211644@qq.com>
Date:   Fri Jun 22 11:02:42 2018 +0800

    wrote a  readme file

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git reset --hard HEAD^                    ##go back to the last one
HEAD is now at 5f43bc0 add distributed

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ cat readme.txt                            ##look at the specific file
git is a  version control systerm
git is free software
Git is a distributed version control system.
Git is free software

##############版本回退 
Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git reset --hard 48763a                  ##go back the last commit version 
HEAD is now at 48763a1 append GPL

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ cat readme.txt

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git reflog                               ##look at the  order history  查看命令记录
48763a1 (HEAD -> master) HEAD@{0}: reset: moving to 48763a
5f43bc0 HEAD@{1}: reset: moving to HEAD^
48763a1 (HEAD -> master) HEAD@{2}: commit: append GPL
5f43bc0 HEAD@{3}: commit: add distributed
024dabc HEAD@{4}: commit (initial): wrote a readme file


################git add  in fact add something to the stage(for temporary),commit is to add these changes  commit to the branches(master default) for one time
################git add 实际上就是把工作区文件中修改的东西防在暂存区（stage），之后通过git commit可以一次性将暂存区的内容提交到分支（默认为系统自己建立的master）

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        help menu with git.txt

no changes added to commit (use "git add" and/or "git commit -a")


Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git add readme.txt


Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git add "help menu with git.txt"

Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   help menu with git.txt
        modified:   readme.txt


Administrator@PC-20180411SCIX MINGW64 ~/learngit (master)
$ git commit -m"understand how stage works"    ##提交修改
[master 8d8c35e] understand how stage works
 2 files changed, 101 insertions(+), 1 deletion(-)
 create mode 100644 help menu with git.txt

#######################管理修改
第一次修改 -> git add -> 第二次修改 -> git commit

你看，我们前面讲了，Git管理的是修改，
当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，
但是，在工作区的第二次修改并没有放入暂存区，
所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。

第一次修改 -> git add -> 第二次修改 -> git add -> git commit

好，现在，把第二次修改提交了，然后开始小结。


小结
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。

#########################撤消修改

情况1 ：修改只在工作区   $ git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。
情况2 ：已经放在stage

现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：
git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
还记得如何丢弃工作区的修改吗？

$ git checkout -- readme.txt
$ git status
On branch master
nothing to commit, working tree clean


小结


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

################3########删除文件
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：

$ rm test.txt

这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：

$ git status

现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt

$ git commit -m "remove test.txt"

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git checkout -- test.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

#############################远程仓库
现在只要本地提交，
$git push origin master
就可以把最新分支推送到远程仓库了

如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。

你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。


从远程仓库克隆至本地

首先，要创建一个远程仓库，gitskills
$ git clone git@github.com:kskschen/gitskills.git
导出目录 
$ cd gitskills
$ ls


小结
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


